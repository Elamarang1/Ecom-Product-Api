{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1750214277307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750215804549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n const path = require('path');\r\n const app = express();\r\n const PORT = 3000;\r\n \r\n-app.use(bodyParser.json());\r\n+app.use(bodyParser.json({ limit: '50mb' }));\r\n+app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\n+\r\n app.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n \r\n // Ensure uploads folder exists\r\n const uploadDir = path.join(__dirname, 'uploads');\r\n"
                },
                {
                    "date": 1750266744099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,156 @@\n const express = require('express');\r\n+const mongoose = require('mongoose');\r\n const bodyParser = require('body-parser');\r\n const fs = require('fs');\r\n const path = require('path');\r\n+const Product = require('./models/product');\r\n+\r\n const app = express();\r\n const PORT = 3000;\r\n \r\n+mongoose.connect('mongodb://localhost:27017/product_db', {\r\n+  useNewUrlParser: true,\r\n+  useUnifiedTopology: true\r\n+}).then(() => console.log('✅ MongoDB Connected'))\r\n+  .catch(err => console.error('❌ MongoDB Error:', err));\r\n+\r\n app.use(bodyParser.json({ limit: '50mb' }));\r\n app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\n-\r\n app.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n \r\n-// Ensure uploads folder exists\r\n+// Create uploads directory if not exists\r\n const uploadDir = path.join(__dirname, 'uploads');\r\n if (!fs.existsSync(uploadDir)) {\r\n   fs.mkdirSync(uploadDir);\r\n }\r\n \r\n-// Simulated database\r\n-let products = [];\r\n-let productIdCounter = 1;\r\n+let imageIdCounter = 111;\r\n let variantIdCounter = 101;\r\n-let imageIdCounter = 111;\r\n \r\n-// Helper to save base64 image and return file path\r\n+// Helper: Save image\r\n function saveBase64Image(base64Str, imageId) {\r\n   const matches = base64Str.match(/^data:(image\\/[a-zA-Z]+);base64,(.+)$/);\r\n   if (!matches) return null;\r\n \r\n-  const ext = matches[1].split('/')[1]; // png, jpeg\r\n+  const ext = matches[1].split('/')[1];\r\n   const data = matches[2];\r\n   const filename = `image_${imageId}.${ext}`;\r\n   const filepath = path.join(uploadDir, filename);\r\n \r\n   fs.writeFileSync(filepath, Buffer.from(data, 'base64'));\r\n-  return `uploads/${filename}`; // Public URL path\r\n+  return `uploads/${filename}`;\r\n }\r\n \r\n-// API to create product\r\n-app.post('/api/products', (req, res) => {\r\n-  const payload = req.body;\r\n+// CREATE\r\n+app.post('/api/products', async (req, res) => {\r\n+  try {\r\n+    const payload = req.body;\r\n \r\n-  const productId = productIdCounter++;\r\n-  const product = {\r\n-    id: productId,\r\n-    title: payload.title,\r\n-    description: payload.description,\r\n-    type: payload.type,\r\n-    brand: payload.brand,\r\n-    collection: payload.collection || [],\r\n-    category: payload.category,\r\n-    price: Number(payload.price),\r\n-    sale: payload.sale || false,\r\n-    discount: payload.discount,\r\n-    stock: Number(payload.stock),\r\n-    new: payload.newProduct || false,\r\n-    tags: [...(payload.tags || []), payload.brand || ''],\r\n-    variants: [],\r\n-    images: []\r\n-  };\r\n+    const images = [];\r\n+    const variants = [];\r\n \r\n-  (payload[\"images Details\"] || []).forEach(image => {\r\n-    const imageId = imageIdCounter++;\r\n-    const variantIds = [];\r\n+    (payload[\"images Details\"] || []).forEach(image => {\r\n+      const imageId = imageIdCounter++;\r\n+      const variantIds = [];\r\n \r\n-    // Save image to disk and get file path\r\n-    const filePath = saveBase64Image(image.src, imageId);\r\n+      const filePath = saveBase64Image(image.src, imageId);\r\n \r\n-    image[\"variant Details\"].forEach(variant => {\r\n-      const variantId = variantIdCounter++;\r\n+      image[\"variant Details\"].forEach(variant => {\r\n+        const variantId = variantIdCounter++;\r\n+        variants.push({\r\n+          sku: variant.sku,\r\n+          size: variant.size,\r\n+          color: variant.color,\r\n+          image_id: imageId\r\n+        });\r\n+        variantIds.push(variantId);\r\n+      });\r\n \r\n-      product.variants.push({\r\n-        variant_id: variantId,\r\n-        id: productId,\r\n-        sku: variant.sku,\r\n-        size: variant.size,\r\n-        color: variant.color,\r\n-        image_id: imageId\r\n+      images.push({\r\n+        image_id: imageId,\r\n+        alt: image.alt,\r\n+        src: filePath,\r\n+        variant_id: variantIds\r\n       });\r\n-\r\n-      variantIds.push(variantId);\r\n     });\r\n \r\n-    product.images.push({\r\n-      image_id: imageId,\r\n-      id: productId,\r\n-      alt: image.alt,\r\n-      src: filePath, // saved file path instead of base64\r\n-      variant_id: variantIds\r\n+    const product = new Product({\r\n+      title: payload.title,\r\n+      description: payload.description,\r\n+      type: payload.type,\r\n+      brand: payload.brand,\r\n+      collection: payload.collection || [],\r\n+      category: payload.category,\r\n+      price: Number(payload.price),\r\n+      sale: payload.sale || false,\r\n+      discount: payload.discount,\r\n+      stock: Number(payload.stock),\r\n+      new: payload.newProduct || false,\r\n+      tags: [...(payload.tags || []), payload.brand || ''],\r\n+      variants,\r\n+      images\r\n     });\r\n-  });\r\n \r\n-  products.push(product);\r\n+    await product.save();\r\n+    res.status(201).json({ message: 'Product created', data: product });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n \r\n-  res.status(201).json({\r\n-    message: 'Product created and image saved successfully',\r\n-    data: product\r\n-  });\r\n+// READ ALL\r\n+app.get('/api/products', async (req, res) => {\r\n+  try {\r\n+    const allProducts = await Product.find();\r\n+    res.json(allProducts);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n });\r\n \r\n-// Get all products\r\n-app.get('/api/products', (req, res) => {\r\n-  res.json(products);\r\n+// READ ONE\r\n+app.get('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) return res.status(404).json({ error: 'Product not found' });\r\n+    res.json(product);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n });\r\n \r\n-// Start server\r\n+// UPDATE\r\n+app.put('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {\r\n+      new: true\r\n+    });\r\n+    if (!updated) return res.status(404).json({ error: 'Product not found' });\r\n+    res.json({ message: 'Product updated', data: updated });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE\r\n+app.delete('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const deleted = await Product.findByIdAndDelete(req.params.id);\r\n+    if (!deleted) return res.status(404).json({ error: 'Product not found' });\r\n+\r\n+    // Delete images from disk\r\n+    deleted.images.forEach(img => {\r\n+      const filePath = path.join(__dirname, img.src);\r\n+      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);\r\n+    });\r\n+\r\n+    res.json({ message: 'Product deleted' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// START SERVER\r\n app.listen(PORT, () => {\r\n-  console.log(`🚀 Server running at http://localhost:${PORT}`);\r\n+  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751739523874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,11 @@\n const bodyParser = require('body-parser');\r\n const fs = require('fs');\r\n const path = require('path');\r\n const Product = require('./models/product');\r\n-\r\n+var cors = require('cors')\r\n const app = express();\r\n+app.use(cors('*'));\r\n const PORT = 3000;\r\n \r\n mongoose.connect('mongodb://localhost:27017/product_db', {\r\n   useNewUrlParser: true,\r\n@@ -149,8 +150,40 @@\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n+// DELETE\r\n+app.delete('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const deleted = await Product.findByIdAndDelete(req.params.id);\r\n+    if (!deleted) return res.status(404).json({ error: 'Product not found' });\r\n+\r\n+    // Delete images from disk\r\n+    deleted.images.forEach(img => {\r\n+      const filePath = path.join(__dirname, img.src);\r\n+      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);\r\n+    });\r\n+\r\n+    res.json({ message: 'Product deleted' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n // START SERVER\r\n app.listen(PORT, () => {\r\n   console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n });\r\n+\r\n+\r\n+// 123\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1751780160491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const mongoose = require('mongoose');\r\n const bodyParser = require('body-parser');\r\n const fs = require('fs');\r\n const path = require('path');\r\n+const Razorpay = require('razorpay');\r\n const Product = require('./models/product');\r\n var cors = require('cors')\r\n const app = express();\r\n app.use(cors('*'));\r\n@@ -168,8 +169,33 @@\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n+\r\n+\r\n+app.post('/api/razorpay/order', async (req, res) => {\r\n+  try {\r\n+    const { amount, currency, receipt } = req.body;\r\n+\r\n+    if (!amount || !currency || !receipt) {\r\n+      return res.status(400).json({ error: 'Missing required parameters' });\r\n+    }\r\n+\r\n+    const options = {\r\n+      amount: amount * 100,\r\n+      currency,\r\n+      receipt,\r\n+      payment_capture: 1\r\n+    };\r\n+\r\n+    const order = await razorpay.orders.create(options);\r\n+    res.json(order);\r\n+  } catch (error) {\r\n+    console.error('❌ Razorpay Order Error:', error);\r\n+    res.status(500).json({ error: 'Failed to create Razorpay order' });\r\n+  }\r\n+});\r\n+\r\n // START SERVER\r\n app.listen(PORT, () => {\r\n   console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751780174975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,14 @@\n const app = express();\r\n app.use(cors('*'));\r\n const PORT = 3000;\r\n \r\n+\r\n+const razorpay = new Razorpay({\r\n+  key_id: 'YOUR_RAZORPAY_KEY_ID',\r\n+  key_secret: 'YOUR_RAZORPAY_SECRET',\r\n+});\r\n+\r\n mongoose.connect('mongodb://localhost:27017/product_db', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true\r\n }).then(() => console.log('✅ MongoDB Connected'))\r\n"
                },
                {
                    "date": 1751780214574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n const PORT = 3000;\r\n \r\n \r\n const razorpay = new Razorpay({\r\n-  key_id: 'YOUR_RAZORPAY_KEY_ID',\r\n+  key_id: 'rzp_test_GYgMTUS1iaCs6o',\r\n   key_secret: 'YOUR_RAZORPAY_SECRET',\r\n });\r\n \r\n mongoose.connect('mongodb://localhost:27017/product_db', {\r\n"
                },
                {
                    "date": 1751780221953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n \r\n const razorpay = new Razorpay({\r\n   key_id: 'rzp_test_GYgMTUS1iaCs6o',\r\n-  key_secret: 'YOUR_RAZORPAY_SECRET',\r\n+  key_secret: 'MxmnEAix8zMOg9xa02ynWt3G',\r\n });\r\n \r\n mongoose.connect('mongodb://localhost:27017/product_db', {\r\n   useNewUrlParser: true,\r\n"
                },
                {
                    "date": 1751780364110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,25 +157,25 @@\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n-// DELETE\r\n-app.delete('/api/products/:id', async (req, res) => {\r\n-  try {\r\n-    const deleted = await Product.findByIdAndDelete(req.params.id);\r\n-    if (!deleted) return res.status(404).json({ error: 'Product not found' });\r\n+// // DELETE\r\n+// app.delete('/api/products/:id', async (req, res) => {\r\n+//   try {\r\n+//     const deleted = await Product.findByIdAndDelete(req.params.id);\r\n+//     if (!deleted) return res.status(404).json({ error: 'Product not found' });\r\n \r\n-    // Delete images from disk\r\n-    deleted.images.forEach(img => {\r\n-      const filePath = path.join(__dirname, img.src);\r\n-      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);\r\n-    });\r\n+//     // Delete images from disk\r\n+//     deleted.images.forEach(img => {\r\n+//       const filePath = path.join(__dirname, img.src);\r\n+//       if (fs.existsSync(filePath)) fs.unlinkSync(filePath);\r\n+//     });\r\n \r\n-    res.json({ message: 'Product deleted' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: err.message });\r\n-  }\r\n-});\r\n+//     res.json({ message: 'Product deleted' });\r\n+//   } catch (err) {\r\n+//     res.status(500).json({ error: err.message });\r\n+//   }\r\n+// });\r\n \r\n \r\n \r\n app.post('/api/razorpay/order', async (req, res) => {\r\n"
                },
                {
                    "date": 1752680046477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,34 @@\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n+// FILTER PRODUCTS by brand, minPrice, maxPrice\r\n+app.get('/api/products/filter', async (req, res) => {\r\n+  try {\r\n+    const { brand, minPrice, maxPrice } = req.query;\r\n+\r\n+    // Build filter object\r\n+    const filter = {};\r\n+\r\n+    if (brand) {\r\n+      filter.brand = brand;\r\n+    }\r\n+\r\n+    if (minPrice || maxPrice) {\r\n+      filter.price = {};\r\n+      if (minPrice) filter.price.$gte = Number(minPrice);\r\n+      if (maxPrice) filter.price.$lte = Number(maxPrice);\r\n+    }\r\n+\r\n+    const products = await Product.find(filter);\r\n+    res.json(products);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n // UPDATE\r\n app.put('/api/products/:id', async (req, res) => {\r\n   try {\r\n     const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {\r\n"
                },
                {
                    "date": 1752682066135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,17 +129,24 @@\n \r\n // FILTER PRODUCTS by brand, minPrice, maxPrice\r\n app.get('/api/products/filter', async (req, res) => {\r\n   try {\r\n-    const { brand, minPrice, maxPrice } = req.query;\r\n+    let { brand, minPrice, maxPrice } = req.query;\r\n \r\n-    // Build filter object\r\n     const filter = {};\r\n \r\n+    // Normalize brand\r\n     if (brand) {\r\n-      filter.brand = brand;\r\n+      if (typeof brand === 'string') {\r\n+        // single brand\r\n+        filter.brand = brand;\r\n+      } else if (Array.isArray(brand)) {\r\n+        // multiple brands\r\n+        filter.brand = { $in: brand };\r\n+      }\r\n     }\r\n \r\n+    // Normalize price\r\n     if (minPrice || maxPrice) {\r\n       filter.price = {};\r\n       if (minPrice) filter.price.$gte = Number(minPrice);\r\n       if (maxPrice) filter.price.$lte = Number(maxPrice);\r\n@@ -147,13 +154,15 @@\n \r\n     const products = await Product.find(filter);\r\n     res.json(products);\r\n   } catch (err) {\r\n+    console.error('Filter Error:', err);\r\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n \r\n+\r\n // UPDATE\r\n app.put('/api/products/:id', async (req, res) => {\r\n   try {\r\n     const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {\r\n"
                },
                {
                    "date": 1752682387152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,29 +105,8 @@\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n-// READ ALL\r\n-app.get('/api/products', async (req, res) => {\r\n-  try {\r\n-    const allProducts = await Product.find();\r\n-    res.json(allProducts);\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: err.message });\r\n-  }\r\n-});\r\n-\r\n-// READ ONE\r\n-app.get('/api/products/:id', async (req, res) => {\r\n-  try {\r\n-    const product = await Product.findById(req.params.id);\r\n-    if (!product) return res.status(404).json({ error: 'Product not found' });\r\n-    res.json(product);\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: err.message });\r\n-  }\r\n-});\r\n-\r\n // FILTER PRODUCTS by brand, minPrice, maxPrice\r\n app.get('/api/products/filter', async (req, res) => {\r\n   try {\r\n     let { brand, minPrice, maxPrice } = req.query;\r\n@@ -160,9 +139,32 @@\n   }\r\n });\r\n \r\n \r\n+// READ ALL\r\n+app.get('/api/products', async (req, res) => {\r\n+  try {\r\n+    const allProducts = await Product.find();\r\n+    res.json(allProducts);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n \r\n+// READ ONE\r\n+app.get('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) return res.status(404).json({ error: 'Product not found' });\r\n+    res.json(product);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n // UPDATE\r\n app.put('/api/products/:id', async (req, res) => {\r\n   try {\r\n     const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {\r\n"
                },
                {
                    "date": 1752984502927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,18 +113,31 @@\n \r\n     const filter = {};\r\n \r\n     // Normalize brand\r\n-    if (brand) {\r\n-      if (typeof brand === 'string') {\r\n-        // single brand\r\n-        filter.brand = brand;\r\n-      } else if (Array.isArray(brand)) {\r\n-        // multiple brands\r\n-        filter.brand = { $in: brand };\r\n-      }\r\n-    }\r\n+    // if (brand) {\r\n+    //   if (typeof brand === 'string') {\r\n+    //     // single brand\r\n+    //     filter.brand = brand;\r\n+    //   } else if (Array.isArray(brand)) {\r\n+    //     // multiple brands\r\n+    //     filter.brand = { $in: brand };\r\n+    //   }\r\n+    // }\r\n \r\n+    // Normalize brand\r\n+if (brand) {\r\n+  if (typeof brand === 'string') {\r\n+    // handle comma-separated string\r\n+    const brandList = brand.split(',').map(b => b.trim());\r\n+    filter.brand = brandList.length > 1 ? { $in: brandList } : brandList[0];\r\n+  } else if (Array.isArray(brand)) {\r\n+    // multiple brand array (e.g., ?brand=iphone&brand=zara)\r\n+    filter.brand = { $in: brand };\r\n+  }\r\n+}\r\n+\r\n+\r\n     // Normalize price\r\n     if (minPrice || maxPrice) {\r\n       filter.price = {};\r\n       if (minPrice) filter.price.$gte = Number(minPrice);\r\n"
                },
                {
                    "date": 1752991133391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,31 +113,18 @@\n \r\n     const filter = {};\r\n \r\n     // Normalize brand\r\n-    // if (brand) {\r\n-    //   if (typeof brand === 'string') {\r\n-    //     // single brand\r\n-    //     filter.brand = brand;\r\n-    //   } else if (Array.isArray(brand)) {\r\n-    //     // multiple brands\r\n-    //     filter.brand = { $in: brand };\r\n-    //   }\r\n-    // }\r\n+    if (brand) {\r\n+      if (typeof brand === 'string') {\r\n+        // single brand\r\n+        filter.brand = brand;\r\n+      } else if (Array.isArray(brand)) {\r\n+        // multiple brands\r\n+        filter.brand = { $in: brand };\r\n+      }\r\n+    }\r\n \r\n-    // Normalize brand\r\n-if (brand) {\r\n-  if (typeof brand === 'string') {\r\n-    // handle comma-separated string\r\n-    const brandList = brand.split(',').map(b => b.trim());\r\n-    filter.brand = brandList.length > 1 ? { $in: brandList } : brandList[0];\r\n-  } else if (Array.isArray(brand)) {\r\n-    // multiple brand array (e.g., ?brand=iphone&brand=zara)\r\n-    filter.brand = { $in: brand };\r\n-  }\r\n-}\r\n-\r\n-\r\n     // Normalize price\r\n     if (minPrice || maxPrice) {\r\n       filter.price = {};\r\n       if (minPrice) filter.price.$gte = Number(minPrice);\r\n"
                },
                {
                    "date": 1753001101561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   key_id: 'rzp_test_GYgMTUS1iaCs6o',\r\n   key_secret: 'MxmnEAix8zMOg9xa02ynWt3G',\r\n });\r\n \r\n-mongoose.connect('mongodb://localhost:27017/product_db', {\r\n+mongoose.connect('mongodb://127.0.0.1:27017/product_db', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true\r\n }).then(() => console.log('✅ MongoDB Connected'))\r\n   .catch(err => console.error('❌ MongoDB Error:', err));\r\n"
                },
                {
                    "date": 1753024184587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,21 +163,83 @@\n \r\n \r\n \r\n \r\n-// UPDATE\r\n-app.put('/api/products/:id', async (req, res) => {\r\n+app.put('/api/products/:id', upload.array('images'), async (req, res) => {\r\n   try {\r\n-    const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {\r\n-      new: true\r\n+    const productId = req.params.id;\r\n+    const {\r\n+      title,\r\n+      description,\r\n+      type,\r\n+      brand,\r\n+      category,\r\n+      price,\r\n+      discount,\r\n+      stock,\r\n+      new: isNew,\r\n+      sale,\r\n+      tags,\r\n+      collection,\r\n+      variants,\r\n+      existingImages // For reusing existing image URLs\r\n+    } = req.body;\r\n+\r\n+    const files = req.files; // New images uploaded\r\n+\r\n+    // 1. Build image array (reusing existing + new uploads)\r\n+    const imageData = [];\r\n+\r\n+    if (Array.isArray(existingImages)) {\r\n+      existingImages.forEach(img => {\r\n+        imageData.push({\r\n+          src: img.src,\r\n+          alt: img.alt || 'image not found.'\r\n+        });\r\n+      });\r\n+    }\r\n+\r\n+    files.forEach(file => {\r\n+      imageData.push({\r\n+        src: `/uploads/${file.filename}`,\r\n+        alt: 'image not found.'\r\n+      });\r\n     });\r\n-    if (!updated) return res.status(404).json({ error: 'Product not found' });\r\n-    res.json({ message: 'Product updated', data: updated });\r\n+\r\n+    // 2. Build full update payload\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      productId,\r\n+      {\r\n+        title,\r\n+        description,\r\n+        type,\r\n+        brand,\r\n+        category,\r\n+        price,\r\n+        discount,\r\n+        stock,\r\n+        new: isNew,\r\n+        sale,\r\n+        tags: Array.isArray(tags) ? tags : [tags],\r\n+        collection: Array.isArray(collection) ? collection : [collection],\r\n+        images: imageData,\r\n+        variants: JSON.parse(variants) // Must be stringified JSON from frontend\r\n+      },\r\n+      { new: true }\r\n+    );\r\n+\r\n+    if (!updatedProduct) {\r\n+      return res.status(404).json({ error: 'Product not found' });\r\n+    }\r\n+\r\n+    res.json({ message: 'Product updated', data: updatedProduct });\r\n   } catch (err) {\r\n+    console.error('Update Error:', err);\r\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n+\r\n // DELETE\r\n app.delete('/api/products/:id', async (req, res) => {\r\n   try {\r\n     const deleted = await Product.findByIdAndDelete(req.params.id);\r\n"
                },
                {
                    "date": 1753024290293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,19 @@\n var cors = require('cors')\r\n const app = express();\r\n app.use(cors('*'));\r\n const PORT = 3000;\r\n+const multer = require('multer');\r\n+const storage = multer.diskStorage({\r\n+  destination: function (req, file, cb) {\r\n+    cb(null, 'uploads/');\r\n+  },\r\n+  filename: function (req, file, cb) {\r\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\r\n+    cb(null, `image_${uniqueSuffix}_${file.originalname}`);\r\n+  }\r\n+});\r\n+const upload = multer({ storage: storage });\r\n \r\n \r\n const razorpay = new Razorpay({\r\n   key_id: 'rzp_test_GYgMTUS1iaCs6o',\r\n"
                },
                {
                    "date": 1753024320252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,83 +174,76 @@\n \r\n \r\n \r\n \r\n-app.put('/api/products/:id', upload.array('images'), async (req, res) => {\r\n+app.put('/api/products/:id', async (req, res) => {\r\n   try {\r\n-    const productId = req.params.id;\r\n-    const {\r\n-      title,\r\n-      description,\r\n-      type,\r\n-      brand,\r\n-      category,\r\n-      price,\r\n-      discount,\r\n-      stock,\r\n-      new: isNew,\r\n-      sale,\r\n-      tags,\r\n-      collection,\r\n-      variants,\r\n-      existingImages // For reusing existing image URLs\r\n-    } = req.body;\r\n+    const payload = req.body;\r\n \r\n-    const files = req.files; // New images uploaded\r\n+    const images = [];\r\n+    const variants = [];\r\n \r\n-    // 1. Build image array (reusing existing + new uploads)\r\n-    const imageData = [];\r\n+    (payload[\"images Details\"] || []).forEach(image => {\r\n+      const imageId = imageIdCounter++;\r\n+      const variantIds = [];\r\n \r\n-    if (Array.isArray(existingImages)) {\r\n-      existingImages.forEach(img => {\r\n-        imageData.push({\r\n-          src: img.src,\r\n-          alt: img.alt || 'image not found.'\r\n+      let filePath = image.src;\r\n+\r\n+      if (image.src && image.src.startsWith(\"data:image\")) {\r\n+        filePath = saveBase64Image(image.src, imageId);\r\n+      }\r\n+\r\n+      image[\"variant Details\"].forEach(variant => {\r\n+        const variantId = variantIdCounter++;\r\n+        variants.push({\r\n+          sku: variant.sku,\r\n+          size: variant.size,\r\n+          color: variant.color,\r\n+          image_id: imageId\r\n         });\r\n+        variantIds.push(variantId);\r\n       });\r\n-    }\r\n \r\n-    files.forEach(file => {\r\n-      imageData.push({\r\n-        src: `/uploads/${file.filename}`,\r\n-        alt: 'image not found.'\r\n+      images.push({\r\n+        image_id: imageId,\r\n+        alt: image.alt || 'image not found.',\r\n+        src: filePath,\r\n+        variant_id: variantIds\r\n       });\r\n     });\r\n \r\n-    // 2. Build full update payload\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      productId,\r\n+    const updated = await Product.findByIdAndUpdate(\r\n+      req.params.id,\r\n       {\r\n-        title,\r\n-        description,\r\n-        type,\r\n-        brand,\r\n-        category,\r\n-        price,\r\n-        discount,\r\n-        stock,\r\n-        new: isNew,\r\n-        sale,\r\n-        tags: Array.isArray(tags) ? tags : [tags],\r\n-        collection: Array.isArray(collection) ? collection : [collection],\r\n-        images: imageData,\r\n-        variants: JSON.parse(variants) // Must be stringified JSON from frontend\r\n+        title: payload.title,\r\n+        description: payload.description,\r\n+        type: payload.type,\r\n+        brand: payload.brand,\r\n+        collection: payload.collection || [],\r\n+        category: payload.category,\r\n+        price: Number(payload.price),\r\n+        sale: payload.sale || false,\r\n+        discount: payload.discount,\r\n+        stock: Number(payload.stock),\r\n+        new: payload.newProduct || false,\r\n+        tags: [...(payload.tags || []), payload.brand || ''],\r\n+        variants,\r\n+        images\r\n       },\r\n       { new: true }\r\n     );\r\n \r\n-    if (!updatedProduct) {\r\n-      return res.status(404).json({ error: 'Product not found' });\r\n-    }\r\n+    if (!updated) return res.status(404).json({ error: 'Product not found' });\r\n \r\n-    res.json({ message: 'Product updated', data: updatedProduct });\r\n+    res.json({ message: 'Product updated', data: updated });\r\n   } catch (err) {\r\n     console.error('Update Error:', err);\r\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n \r\n+\r\n // DELETE\r\n app.delete('/api/products/:id', async (req, res) => {\r\n   try {\r\n     const deleted = await Product.findByIdAndDelete(req.params.id);\r\n"
                }
            ],
            "date": 1750214277307,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.use(bodyParser.json());\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Ensure uploads folder exists\r\nconst uploadDir = path.join(__dirname, 'uploads');\r\nif (!fs.existsSync(uploadDir)) {\r\n  fs.mkdirSync(uploadDir);\r\n}\r\n\r\n// Simulated database\r\nlet products = [];\r\nlet productIdCounter = 1;\r\nlet variantIdCounter = 101;\r\nlet imageIdCounter = 111;\r\n\r\n// Helper to save base64 image and return file path\r\nfunction saveBase64Image(base64Str, imageId) {\r\n  const matches = base64Str.match(/^data:(image\\/[a-zA-Z]+);base64,(.+)$/);\r\n  if (!matches) return null;\r\n\r\n  const ext = matches[1].split('/')[1]; // png, jpeg\r\n  const data = matches[2];\r\n  const filename = `image_${imageId}.${ext}`;\r\n  const filepath = path.join(uploadDir, filename);\r\n\r\n  fs.writeFileSync(filepath, Buffer.from(data, 'base64'));\r\n  return `uploads/${filename}`; // Public URL path\r\n}\r\n\r\n// API to create product\r\napp.post('/api/products', (req, res) => {\r\n  const payload = req.body;\r\n\r\n  const productId = productIdCounter++;\r\n  const product = {\r\n    id: productId,\r\n    title: payload.title,\r\n    description: payload.description,\r\n    type: payload.type,\r\n    brand: payload.brand,\r\n    collection: payload.collection || [],\r\n    category: payload.category,\r\n    price: Number(payload.price),\r\n    sale: payload.sale || false,\r\n    discount: payload.discount,\r\n    stock: Number(payload.stock),\r\n    new: payload.newProduct || false,\r\n    tags: [...(payload.tags || []), payload.brand || ''],\r\n    variants: [],\r\n    images: []\r\n  };\r\n\r\n  (payload[\"images Details\"] || []).forEach(image => {\r\n    const imageId = imageIdCounter++;\r\n    const variantIds = [];\r\n\r\n    // Save image to disk and get file path\r\n    const filePath = saveBase64Image(image.src, imageId);\r\n\r\n    image[\"variant Details\"].forEach(variant => {\r\n      const variantId = variantIdCounter++;\r\n\r\n      product.variants.push({\r\n        variant_id: variantId,\r\n        id: productId,\r\n        sku: variant.sku,\r\n        size: variant.size,\r\n        color: variant.color,\r\n        image_id: imageId\r\n      });\r\n\r\n      variantIds.push(variantId);\r\n    });\r\n\r\n    product.images.push({\r\n      image_id: imageId,\r\n      id: productId,\r\n      alt: image.alt,\r\n      src: filePath, // saved file path instead of base64\r\n      variant_id: variantIds\r\n    });\r\n  });\r\n\r\n  products.push(product);\r\n\r\n  res.status(201).json({\r\n    message: 'Product created and image saved successfully',\r\n    data: product\r\n  });\r\n});\r\n\r\n// Get all products\r\napp.get('/api/products', (req, res) => {\r\n  res.json(products);\r\n});\r\n\r\n// Start server\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Server running at http://localhost:${PORT}`);\r\n});\r\n"
        }
    ]
}