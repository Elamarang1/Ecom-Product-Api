{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1750214277307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750215804549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n const path = require('path');\r\n const app = express();\r\n const PORT = 3000;\r\n \r\n-app.use(bodyParser.json());\r\n+app.use(bodyParser.json({ limit: '50mb' }));\r\n+app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\n+\r\n app.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n \r\n // Ensure uploads folder exists\r\n const uploadDir = path.join(__dirname, 'uploads');\r\n"
                },
                {
                    "date": 1750266744099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,156 @@\n const express = require('express');\r\n+const mongoose = require('mongoose');\r\n const bodyParser = require('body-parser');\r\n const fs = require('fs');\r\n const path = require('path');\r\n+const Product = require('./models/product');\r\n+\r\n const app = express();\r\n const PORT = 3000;\r\n \r\n+mongoose.connect('mongodb://localhost:27017/product_db', {\r\n+  useNewUrlParser: true,\r\n+  useUnifiedTopology: true\r\n+}).then(() => console.log('✅ MongoDB Connected'))\r\n+  .catch(err => console.error('❌ MongoDB Error:', err));\r\n+\r\n app.use(bodyParser.json({ limit: '50mb' }));\r\n app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\n-\r\n app.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n \r\n-// Ensure uploads folder exists\r\n+// Create uploads directory if not exists\r\n const uploadDir = path.join(__dirname, 'uploads');\r\n if (!fs.existsSync(uploadDir)) {\r\n   fs.mkdirSync(uploadDir);\r\n }\r\n \r\n-// Simulated database\r\n-let products = [];\r\n-let productIdCounter = 1;\r\n+let imageIdCounter = 111;\r\n let variantIdCounter = 101;\r\n-let imageIdCounter = 111;\r\n \r\n-// Helper to save base64 image and return file path\r\n+// Helper: Save image\r\n function saveBase64Image(base64Str, imageId) {\r\n   const matches = base64Str.match(/^data:(image\\/[a-zA-Z]+);base64,(.+)$/);\r\n   if (!matches) return null;\r\n \r\n-  const ext = matches[1].split('/')[1]; // png, jpeg\r\n+  const ext = matches[1].split('/')[1];\r\n   const data = matches[2];\r\n   const filename = `image_${imageId}.${ext}`;\r\n   const filepath = path.join(uploadDir, filename);\r\n \r\n   fs.writeFileSync(filepath, Buffer.from(data, 'base64'));\r\n-  return `uploads/${filename}`; // Public URL path\r\n+  return `uploads/${filename}`;\r\n }\r\n \r\n-// API to create product\r\n-app.post('/api/products', (req, res) => {\r\n-  const payload = req.body;\r\n+// CREATE\r\n+app.post('/api/products', async (req, res) => {\r\n+  try {\r\n+    const payload = req.body;\r\n \r\n-  const productId = productIdCounter++;\r\n-  const product = {\r\n-    id: productId,\r\n-    title: payload.title,\r\n-    description: payload.description,\r\n-    type: payload.type,\r\n-    brand: payload.brand,\r\n-    collection: payload.collection || [],\r\n-    category: payload.category,\r\n-    price: Number(payload.price),\r\n-    sale: payload.sale || false,\r\n-    discount: payload.discount,\r\n-    stock: Number(payload.stock),\r\n-    new: payload.newProduct || false,\r\n-    tags: [...(payload.tags || []), payload.brand || ''],\r\n-    variants: [],\r\n-    images: []\r\n-  };\r\n+    const images = [];\r\n+    const variants = [];\r\n \r\n-  (payload[\"images Details\"] || []).forEach(image => {\r\n-    const imageId = imageIdCounter++;\r\n-    const variantIds = [];\r\n+    (payload[\"images Details\"] || []).forEach(image => {\r\n+      const imageId = imageIdCounter++;\r\n+      const variantIds = [];\r\n \r\n-    // Save image to disk and get file path\r\n-    const filePath = saveBase64Image(image.src, imageId);\r\n+      const filePath = saveBase64Image(image.src, imageId);\r\n \r\n-    image[\"variant Details\"].forEach(variant => {\r\n-      const variantId = variantIdCounter++;\r\n+      image[\"variant Details\"].forEach(variant => {\r\n+        const variantId = variantIdCounter++;\r\n+        variants.push({\r\n+          sku: variant.sku,\r\n+          size: variant.size,\r\n+          color: variant.color,\r\n+          image_id: imageId\r\n+        });\r\n+        variantIds.push(variantId);\r\n+      });\r\n \r\n-      product.variants.push({\r\n-        variant_id: variantId,\r\n-        id: productId,\r\n-        sku: variant.sku,\r\n-        size: variant.size,\r\n-        color: variant.color,\r\n-        image_id: imageId\r\n+      images.push({\r\n+        image_id: imageId,\r\n+        alt: image.alt,\r\n+        src: filePath,\r\n+        variant_id: variantIds\r\n       });\r\n-\r\n-      variantIds.push(variantId);\r\n     });\r\n \r\n-    product.images.push({\r\n-      image_id: imageId,\r\n-      id: productId,\r\n-      alt: image.alt,\r\n-      src: filePath, // saved file path instead of base64\r\n-      variant_id: variantIds\r\n+    const product = new Product({\r\n+      title: payload.title,\r\n+      description: payload.description,\r\n+      type: payload.type,\r\n+      brand: payload.brand,\r\n+      collection: payload.collection || [],\r\n+      category: payload.category,\r\n+      price: Number(payload.price),\r\n+      sale: payload.sale || false,\r\n+      discount: payload.discount,\r\n+      stock: Number(payload.stock),\r\n+      new: payload.newProduct || false,\r\n+      tags: [...(payload.tags || []), payload.brand || ''],\r\n+      variants,\r\n+      images\r\n     });\r\n-  });\r\n \r\n-  products.push(product);\r\n+    await product.save();\r\n+    res.status(201).json({ message: 'Product created', data: product });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n \r\n-  res.status(201).json({\r\n-    message: 'Product created and image saved successfully',\r\n-    data: product\r\n-  });\r\n+// READ ALL\r\n+app.get('/api/products', async (req, res) => {\r\n+  try {\r\n+    const allProducts = await Product.find();\r\n+    res.json(allProducts);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n });\r\n \r\n-// Get all products\r\n-app.get('/api/products', (req, res) => {\r\n-  res.json(products);\r\n+// READ ONE\r\n+app.get('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const product = await Product.findById(req.params.id);\r\n+    if (!product) return res.status(404).json({ error: 'Product not found' });\r\n+    res.json(product);\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n });\r\n \r\n-// Start server\r\n+// UPDATE\r\n+app.put('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const updated = await Product.findByIdAndUpdate(req.params.id, req.body, {\r\n+      new: true\r\n+    });\r\n+    if (!updated) return res.status(404).json({ error: 'Product not found' });\r\n+    res.json({ message: 'Product updated', data: updated });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// DELETE\r\n+app.delete('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const deleted = await Product.findByIdAndDelete(req.params.id);\r\n+    if (!deleted) return res.status(404).json({ error: 'Product not found' });\r\n+\r\n+    // Delete images from disk\r\n+    deleted.images.forEach(img => {\r\n+      const filePath = path.join(__dirname, img.src);\r\n+      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);\r\n+    });\r\n+\r\n+    res.json({ message: 'Product deleted' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// START SERVER\r\n app.listen(PORT, () => {\r\n-  console.log(`🚀 Server running at http://localhost:${PORT}`);\r\n+  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751739523874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,11 @@\n const bodyParser = require('body-parser');\r\n const fs = require('fs');\r\n const path = require('path');\r\n const Product = require('./models/product');\r\n-\r\n+var cors = require('cors')\r\n const app = express();\r\n+app.use(cors('*'));\r\n const PORT = 3000;\r\n \r\n mongoose.connect('mongodb://localhost:27017/product_db', {\r\n   useNewUrlParser: true,\r\n@@ -149,8 +150,40 @@\n     res.status(500).json({ error: err.message });\r\n   }\r\n });\r\n \r\n+// DELETE\r\n+app.delete('/api/products/:id', async (req, res) => {\r\n+  try {\r\n+    const deleted = await Product.findByIdAndDelete(req.params.id);\r\n+    if (!deleted) return res.status(404).json({ error: 'Product not found' });\r\n+\r\n+    // Delete images from disk\r\n+    deleted.images.forEach(img => {\r\n+      const filePath = path.join(__dirname, img.src);\r\n+      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);\r\n+    });\r\n+\r\n+    res.json({ message: 'Product deleted' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n // START SERVER\r\n app.listen(PORT, () => {\r\n   console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n });\r\n+\r\n+\r\n+// 123\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                }
            ],
            "date": 1750214277307,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.use(bodyParser.json());\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Ensure uploads folder exists\r\nconst uploadDir = path.join(__dirname, 'uploads');\r\nif (!fs.existsSync(uploadDir)) {\r\n  fs.mkdirSync(uploadDir);\r\n}\r\n\r\n// Simulated database\r\nlet products = [];\r\nlet productIdCounter = 1;\r\nlet variantIdCounter = 101;\r\nlet imageIdCounter = 111;\r\n\r\n// Helper to save base64 image and return file path\r\nfunction saveBase64Image(base64Str, imageId) {\r\n  const matches = base64Str.match(/^data:(image\\/[a-zA-Z]+);base64,(.+)$/);\r\n  if (!matches) return null;\r\n\r\n  const ext = matches[1].split('/')[1]; // png, jpeg\r\n  const data = matches[2];\r\n  const filename = `image_${imageId}.${ext}`;\r\n  const filepath = path.join(uploadDir, filename);\r\n\r\n  fs.writeFileSync(filepath, Buffer.from(data, 'base64'));\r\n  return `uploads/${filename}`; // Public URL path\r\n}\r\n\r\n// API to create product\r\napp.post('/api/products', (req, res) => {\r\n  const payload = req.body;\r\n\r\n  const productId = productIdCounter++;\r\n  const product = {\r\n    id: productId,\r\n    title: payload.title,\r\n    description: payload.description,\r\n    type: payload.type,\r\n    brand: payload.brand,\r\n    collection: payload.collection || [],\r\n    category: payload.category,\r\n    price: Number(payload.price),\r\n    sale: payload.sale || false,\r\n    discount: payload.discount,\r\n    stock: Number(payload.stock),\r\n    new: payload.newProduct || false,\r\n    tags: [...(payload.tags || []), payload.brand || ''],\r\n    variants: [],\r\n    images: []\r\n  };\r\n\r\n  (payload[\"images Details\"] || []).forEach(image => {\r\n    const imageId = imageIdCounter++;\r\n    const variantIds = [];\r\n\r\n    // Save image to disk and get file path\r\n    const filePath = saveBase64Image(image.src, imageId);\r\n\r\n    image[\"variant Details\"].forEach(variant => {\r\n      const variantId = variantIdCounter++;\r\n\r\n      product.variants.push({\r\n        variant_id: variantId,\r\n        id: productId,\r\n        sku: variant.sku,\r\n        size: variant.size,\r\n        color: variant.color,\r\n        image_id: imageId\r\n      });\r\n\r\n      variantIds.push(variantId);\r\n    });\r\n\r\n    product.images.push({\r\n      image_id: imageId,\r\n      id: productId,\r\n      alt: image.alt,\r\n      src: filePath, // saved file path instead of base64\r\n      variant_id: variantIds\r\n    });\r\n  });\r\n\r\n  products.push(product);\r\n\r\n  res.status(201).json({\r\n    message: 'Product created and image saved successfully',\r\n    data: product\r\n  });\r\n});\r\n\r\n// Get all products\r\napp.get('/api/products', (req, res) => {\r\n  res.json(products);\r\n});\r\n\r\n// Start server\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Server running at http://localhost:${PORT}`);\r\n});\r\n"
        }
    ]
}